var token='';
var express=require('express')
var app=express()

var bodyparser=require('body-parser')
app.use(bodyparser.json())
app.use(bodyparser.urlencoded({extended:true}))

var cors=require('cors')
app.use(cors())

var mongoose=require('mongoose')
var url="mongodb://localhost:27017/mydb"
mongoose.Promise=global.Promise

var jwt=require('jsonwebtoken')
var bcrypt=require('bcryptjs')
var validator=require('validator')

var exvalidator=require('express-validator');
app.use(exvalidator())

var fileUpload=require('express-fileupload')
app.use(fileUpload())
app.use(express.static(__dirname+'/'))

var passport=require('passport')
var LocalStrategy=require('passport-local').Strategy
app.use(passport.initialize())


//mongoose model

// app.use((req,res,next)=>{
//     res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
//     res.header(`Access-Control-Expose-Headers`, `x-auth`);
//     next();
// });


var state=mongoose.model('state',{
    _id:{
        type:Number,
        require:true
    },
    name:{
        type:String,
        require:true
    }
})

var city=mongoose.model('city',{
    stateid:{
        type:Number,
        require:true
    },
    name:{
        type:String,
        require:true
    }
})

var stud=mongoose.model('mystud',{
name:{
    type:String,
    require:true
  },
    age:{
        type:Number,
        require:true
    },
    password:{
        type:String,
        require:true
    },
    gender:{
        type:String,
        require:true
    },
    state:{
        type:String,
        require:true
    },
    city:{
        type:String,
        require:true
    },
    photo:{
        type:String,
        require:true
    },
    hobby:{
        type:Array,
        require:true
    },
    dob:{
        type:Date,
        require:true
    },
    email: {
        type: String,
        require: true,
        validate:
            {
                validator:validator.isEmail,
                message:'{VALUE} is not email'
            }
    },
  contact:
      {
          type:Number,
          require:true
      },
    flag:
        {
            type:Number,
            require:true
        },
    tokens:[{
         access:{
             type:String,
             require:true
         },
        token:{
            type:String,
            require:true
        }
    }]
})

//for fetchData
app.get('/stateFetch',(req,res)=>{
    state.find().then((info)=>{
        res.send(info)
    }).catch((err)=>{
        res.send(err)
        })
})

app.get('/cityFetch/:statenm',(req,res)=>{
    state.find({name:req.params.statenm}).then((info)=>{
        city.find({stateid:info._id}).then((info)=>{
        res.send(info)
        })
    }).catch((err)=>{
        res.send(err)
    })
})

app.get('/fetchData',(req,res)=>{
    stud.find().then((info)=>{
        res.send(info)
    }).catch((err)=>{
        res.send(err)
    })
})

//for image upload
app.get('/',(req,res)=>{
    res.sendFile(__dirname+'/')
})

//for Insert update delete on Student


app.post('/insert',(req,res)=>{
    console.log("At Insert")



    var sampleFile=req.files.photo
    sampleFile.mv(__dirname+"/upload/"+sampleFile.name)

  var dt=new Date(req.body.dob)
  var newstud=new stud(req.body)
   newstud.password=bcrypt.hashSync(req.body.password,10)
   newstud.flag=1
    newstud.dob=dt
    newstud.photo=sampleFile.name
    newstud.save().then(() => {
        var access = 'auth';
        var token = jwt.sign({_id: newstud._id},'abc123').toString()
        newstud.tokens.push({access, token})
        return newstud.save().then(() => {
            return token
        })
    }).then((token) => {
        res.header('x-auth', token).send(newstud)
    }).catch((err)=>{
      res.send(err)
    })
})


app.post('/update',(req,res)=>{
    console.log("At Update")
    var dt=new Date(req.body.dob)
    stud.findById({_id:req.body.id}).then((p)=>{
        p.name=req.body.name
        p.age=req.body.age
        p.password=bcrypt.hashSync(req.body.password,10)
        p.gender=req.body.gender
        p.state=req.body.state
        p.city=req.body.city

   if(req.files!=null){
            var sampleFile=req.files.photo
            sampleFile.mv(__dirname+"/upload/"+sampleFile.name)
            p.photo=sampleFile.name
    }

        p.hobby=req.body.hobby
        p.dob=dt
        p.email=req.body.email
        p.contact=req.body.contact
        p.save().then((updData)=>{
            console.log("after update",updData)
            res.send(updData)
         }).catch((err)=>{
            res.send(err)
        })
    }).catch((err)=>{
        res.send(err)
    })
})

app.post('/delete',(req,res)=>{
    console.log("At Delete")
    stud.findById(req.body.id).then((p)=>{
        p.flag=req.body.contact
        p.save().then((updData)=>{
            res.send(updData)
        })
    }).catch((err)=>{
        res.send(err)
    })
})

//for passport
passport.serializeUser((user,done)=>{
    return done(null,user)
})

passport.deserializeUser((user,done)=>{
    //return done(null,user)
})

passport.use(new LocalStrategy((username,password,done)=>{
    console.log('username',username,password);
    stud.findOne({name:username}).then((user)=>{
        console.log(username,user)
        if(bcrypt.compareSync(password,user.password)){
            console.log(user)
            token=user.tokens[0].token;
            return done(null,user)
        }
        else{
            return done(null,false)
        }
    })
}))

app.post('/login',passport.authenticate('local', {
    successRedirect:'/suc',
    failureRedirect:'/err'
}))

app.get('/suc',(req,res)=>{
    console.log("success")
    res.header('x-auth',token).send({"success":token});
})
app.get('/err',(req,res)=>{
    console.log("failure")
    res.send("failure")
})








app.listen(5000,()=>{
    console.log("server start on port 5000");
    mongoose.connect(url)
    console.log("connected to database....");
})
